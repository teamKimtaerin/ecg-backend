name: Backend CD - Deploy to ECS

on:
  push:
    branches: ["main"]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ecg-project-pipeline-dev-api
  ECS_SERVICE: ecg-project-pipeline-dev-api-service
  ECS_TASK_DEFINITION: ecg-project-pipeline-dev-api
  ECS_CLUSTER: ecg-project-pipeline-dev-cluster

jobs:
  deploy:
    name: Deploy to ECS Fargate
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Also tag as latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update task definition and deploy to ECS
        id: deploy
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Get current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --region ${{ env.AWS_REGION }})
          
          # Create new task definition with updated environment variables and image
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" --arg SECRET_KEY "${{ secrets.SECRET_KEY }}" --arg JWT_SECRET "${{ secrets.JWT_SECRET_KEY }}" --arg AWS_ACCESS_KEY "${{ secrets.AWS_ACCESS_KEY_ID }}" --arg AWS_SECRET_KEY "${{ secrets.AWS_SECRET_ACCESS_KEY }}" --arg GOOGLE_CLIENT_ID "${{ secrets.GOOGLE_CLIENT_ID }}" --arg GOOGLE_CLIENT_SECRET "${{ secrets.GOOGLE_CLIENT_SECRET }}" --arg GOOGLE_REDIRECT_URI "${{ secrets.GOOGLE_REDIRECT_URI }}" --arg CORS_ORIGINS "${{ secrets.CORS_ORIGINS }}" --arg DB_HOST "${{ secrets.DB_HOST }}" --arg DB_PORT "${{ secrets.DB_PORT }}" --arg DB_NAME "${{ secrets.DB_NAME }}" --arg DB_USER "${{ secrets.DB_USER }}" --arg DB_PASSWORD "${{ secrets.DB_PASSWORD }}" --arg DATABASE_URL "${{ secrets.DATABASE_URL }}" '
            .taskDefinition | 
            .containerDefinitions[0].image = $IMAGE |
            .containerDefinitions[0].environment = [
              {"name": "AWS_DEFAULT_REGION", "value": "us-east-1"},
              {"name": "S3_BUCKET_NAME", "value": (.containerDefinitions[0].environment[] | select(.name=="S3_BUCKET_NAME") | .value)},
              {"name": "MODEL_SERVER_URL", "value": (.containerDefinitions[0].environment[] | select(.name=="MODEL_SERVER_URL") | .value)},
              {"name": "DB_HOST", "value": $DB_HOST},
              {"name": "DB_PORT", "value": $DB_PORT},
              {"name": "DB_NAME", "value": $DB_NAME},
              {"name": "DB_USER", "value": $DB_USER},
              {"name": "DB_PASSWORD", "value": $DB_PASSWORD},
              {"name": "DATABASE_URL", "value": $DATABASE_URL},
              {"name": "SECRET_KEY", "value": $SECRET_KEY},
              {"name": "JWT_SECRET_KEY", "value": $JWT_SECRET},
              {"name": "AWS_ACCESS_KEY_ID", "value": $AWS_ACCESS_KEY},
              {"name": "AWS_SECRET_ACCESS_KEY", "value": $AWS_SECRET_KEY},
              {"name": "GOOGLE_CLIENT_ID", "value": $GOOGLE_CLIENT_ID},
              {"name": "GOOGLE_CLIENT_SECRET", "value": $GOOGLE_CLIENT_SECRET},
              {"name": "GOOGLE_REDIRECT_URI", "value": $GOOGLE_REDIRECT_URI},
              {"name": "CORS_ORIGINS", "value": $CORS_ORIGINS}
            ] | 
            del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
          
          # Register new task definition
          echo $NEW_TASK_DEFINITION > task-definition.json
          NEW_REVISION=$(aws ecs register-task-definition --region ${{ env.AWS_REGION }} --cli-input-json file://task-definition.json --query 'taskDefinition.revision')
          
          echo "New task definition revision: $NEW_REVISION"
          
          # Update service with new task definition
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.ECS_TASK_DEFINITION }}:$NEW_REVISION \
            --region ${{ env.AWS_REGION }}

      - name: Wait for service stability
        run: |
          echo "Waiting for ECS service to be stable..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }}
          echo "Deployment completed successfully!"

      - name: Verify deployment status
        run: |
          aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }} \
            --query 'services[0].{Status:status,RunningTasks:runningCount,DesiredTasks:desiredCount,Deployment:deployments[0].rolloutState}' \
            --output json